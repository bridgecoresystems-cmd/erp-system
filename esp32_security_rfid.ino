/*
 * ESP32 Security RFID Scanner - –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 * 
 * –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é/–≤ –∑–¥–∞–Ω–∏–µ
 * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: 1x ESP32 + 1x RC522 RFID
 * –ü–∏—Ç–∞–Ω–∏–µ: USB –∫–∞–±–µ–ª—å –æ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π –∑–∞—Ä—è–¥–∫–∏ (5V 1-2A)
 * –ú–æ–Ω—Ç–∞–∂: RC522 –Ω–∞ –∫—Ä—ã—à–∫–µ –∫–æ—Ä–æ–±–∫–∏ (–¥–≤–æ–π–Ω–æ–π —Å–∫–æ—Ç—á –∏–∑–Ω—É—Ç—Ä–∏)
 * 
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤: /security/api/scan/
 * –°–µ—Ä–≤–µ—Ä: https://erp.bridgecore.tech
 */

#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>
#include <MFRC522.h>
#include <SPI.h>

// ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ï–¢–ò =====
const char* ssid = "Yangibay";
const char* password = "Yangi518918";
const char* server_url = "https://erp.bridgecore.tech";  // –¢–≤–æ–π VPS!
const char* device_id = "ESP32-SEC-001";  // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞

// ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ü–ò–ù–û–í RC522 =====
#define SS_PIN    21    // SDA/SS –ø–∏–Ω –¥–ª—è RC522
#define RST_PIN   22    // RST –ø–∏–Ω –¥–ª—è RC522

// ===== –ò–ù–î–ò–ö–ê–¢–û–†–´ =====
#define LED_GREEN  25   // –ó–µ–ª–µ–Ω—ã–π LED - –≤—Ö–æ–¥ —Ä–∞–∑—Ä–µ—à–µ–Ω
#define LED_RED    26   // –ö—Ä–∞—Å–Ω—ã–π LED - –≤—Ö–æ–¥ –∑–∞–ø—Ä–µ—â–µ–Ω
#define LED_BLUE   27   // –°–∏–Ω–∏–π LED - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
#define BUZZER_PIN 23   // Buzzer –¥–ª—è –∑–≤—É–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

// ===== –û–ë–™–ï–ö–¢ –†–ò–î–ï–†–ê =====
MFRC522 rfidReader(SS_PIN, RST_PIN);

// ===== –ó–ê–©–ò–¢–ê –û–¢ –ü–û–í–¢–û–†–ù–´–• –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ô =====
unsigned long lastScanTime = 0;
String lastCardUID = "";
const unsigned long SCAN_COOLDOWN = 3000;  // 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ–π

// ===== SETUP =====
void setup() {
  Serial.begin(115200);
  delay(100);
  
  Serial.println("\n\n");
  Serial.println("========================================");
  Serial.println("  ESP32 Security RFID Scanner v1.0");
  Serial.println("  –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞");
  Serial.println("========================================");
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∏–Ω–æ–≤
  setupPins();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SPI –∏ RFID —Ä–∏–¥–µ—Ä–∞
  SPI.begin();
  rfidReader.PCD_Init();
  delay(100);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏–¥–µ—Ä–∞
  Serial.println("\n[INIT] –ü—Ä–æ–≤–µ—Ä–∫–∞ RC522 —Ä–∏–¥–µ—Ä–∞...");
  byte version = rfidReader.PCD_ReadRegister(MFRC522::VersionReg);
  if (version == 0x00 || version == 0xFF) {
    Serial.println("‚úó –û–®–ò–ë–ö–ê: RC522 –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    Serial.println("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:");
    Serial.println("  SDA  ‚Üí GPIO 21");
    Serial.println("  SCK  ‚Üí GPIO 18");
    Serial.println("  MOSI ‚Üí GPIO 23");
    Serial.println("  MISO ‚Üí GPIO 19");
    Serial.println("  RST  ‚Üí GPIO 22");
    Serial.println("  3.3V ‚Üí 3.3V");
    Serial.println("  GND  ‚Üí GND");
    signalError(LED_RED);
    while(1) { delay(1000); }  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
  }
  
  Serial.print("‚úì RC522 –Ω–∞–π–¥–µ–Ω! –í–µ—Ä—Å–∏—è: 0x");
  Serial.println(version, HEX);
  signalSuccess(LED_GREEN);
  
  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WiFi
  connectToWiFi();
  
  Serial.println("\n========================================");
  Serial.println("  üõ°Ô∏è  –°–ò–°–¢–ï–ú–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ì–û–¢–û–í–ê!");
  Serial.println("  –ü—Ä–∏–ª–æ–∂–∏—Ç–µ RFID –∫–∞—Ä—Ç—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞");
  Serial.println("========================================\n");
  
  // –°–∏–≥–Ω–∞–ª –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
  beep(3, 150);  // 3 —Å—Ä–µ–¥–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è Security
  
  // –ú–∏–≥–∞–Ω–∏–µ —Å–∏–Ω–∏–º LED (—Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞)
  for (int i = 0; i < 3; i++) {
    digitalWrite(LED_BLUE, HIGH);
    delay(200);
    digitalWrite(LED_BLUE, LOW);
    delay(200);
  }
}

// ===== MAIN LOOP =====
void loop() {
  // –ú–∏–≥–∞–Ω–∏–µ —Å–∏–Ω–∏–º LED —Ä–∞–∑ –≤ 5 —Å–µ–∫—É–Ω–¥ (—Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç)
  static unsigned long lastBlink = 0;
  if (millis() - lastBlink > 5000) {
    digitalWrite(LED_BLUE, HIGH);
    delay(50);
    digitalWrite(LED_BLUE, LOW);
    lastBlink = millis();
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ WiFi —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("\n‚ö† WiFi –ø–æ—Ç–µ—Ä—è–Ω–æ! –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...");
    digitalWrite(LED_BLUE, HIGH);  // –°–∏–Ω–∏–π –≥–æ—Ä–∏—Ç = –Ω–µ—Ç WiFi
    connectToWiFi();
    digitalWrite(LED_BLUE, LOW);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ä—Ç—ã
  if (!rfidReader.PICC_IsNewCardPresent()) {
    delay(50);
    return;
  }
  
  // –ß–∏—Ç–∞–µ–º –∫–∞—Ä—Ç—É
  if (!rfidReader.PICC_ReadCardSerial()) {
    delay(50);
    return;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º UID –∫–∞—Ä—Ç—ã
  String cardUID = getCardUID();
  unsigned long currentTime = millis();
  
  // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π (–¥–µ–±–∞—É–Ω—Å–∏–Ω–≥)
  if (currentTime - lastScanTime < SCAN_COOLDOWN && cardUID == lastCardUID) {
    rfidReader.PICC_HaltA();
    rfidReader.PCD_StopCrypto1();
    delay(50);
    return;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  lastScanTime = currentTime;
  lastCardUID = cardUID;
  
  // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  Serial.println("\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
  Serial.println("‚ïë  üõ°Ô∏è  –ó–ê–ü–†–û–° –î–û–°–¢–£–ü–ê                   ‚ïë");
  Serial.println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
  Serial.print("  RFID UID: ");
  Serial.println(cardUID);
  Serial.print("  –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ");
  Serial.println(device_id);
  Serial.println("  –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...");
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  bool success = sendToServer(cardUID);
  
  if (success) {
    Serial.println("  ‚úì –î–û–°–¢–£–ü –†–ê–ó–†–ï–®–ï–ù!");
    signalSuccess(LED_GREEN);
    beep(2, 150);  // –î–≤–∞ —Å—Ä–µ–¥–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–∞
  } else {
    Serial.println("  ‚úó –î–û–°–¢–£–ü –ó–ê–ü–†–ï–©–ï–ù!");
    signalError(LED_RED);
    beep(1, 500);  // –û–¥–∏–Ω –¥–ª–∏–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª –æ—Ç–∫–∞–∑–∞
  }
  
  Serial.println("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n");
  
  // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –∫–∞—Ä—Ç–æ–π
  rfidReader.PICC_HaltA();
  rfidReader.PCD_StopCrypto1();
  
  delay(100);
}

// ===== –§–£–ù–ö–¶–ò–ò =====

void setupPins() {
  // LED –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
  pinMode(LED_GREEN, OUTPUT);
  pinMode(LED_RED, OUTPUT);
  pinMode(LED_BLUE, OUTPUT);
  pinMode(BUZZER_PIN, OUTPUT);
  
  // –í—ã–∫–ª—é—á–∞–µ–º –≤—Å—ë
  digitalWrite(LED_GREEN, LOW);
  digitalWrite(LED_RED, LOW);
  digitalWrite(LED_BLUE, LOW);
  digitalWrite(BUZZER_PIN, LOW);
  
  Serial.println("[INIT] –ü–∏–Ω—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã:");
  Serial.println("  LED –∑–µ–ª–µ–Ω—ã–π: GPIO 25");
  Serial.println("  LED –∫—Ä–∞—Å–Ω—ã–π: GPIO 26");
  Serial.println("  LED —Å–∏–Ω–∏–π:   GPIO 27");
  Serial.println("  Buzzer:      GPIO 23");
}

void connectToWiFi() {
  Serial.println("\n[WiFi] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏...");
  Serial.print("  SSID: ");
  Serial.println(ssid);
  
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 30) {
    delay(500);
    Serial.print(".");
    attempts++;
    
    if (attempts % 10 == 0) {
      Serial.println();
      Serial.print("  –ü–æ–ø—ã—Ç–∫–∞ " + String(attempts) + "/30...");
    }
  }
  
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\n‚úì WiFi –ø–æ–¥–∫–ª—é—á–µ–Ω!");
    Serial.print("  IP –∞–¥—Ä–µ—Å: ");
    Serial.println(WiFi.localIP());
    Serial.print("  –°–∏–≥–Ω–∞–ª: ");
    Serial.print(WiFi.RSSI());
    Serial.println(" dBm");
    signalSuccess(LED_GREEN);
    beep(2, 100);
  } else {
    Serial.println("\n‚úó WiFi –ù–ï –ø–æ–¥–∫–ª—é—á–µ–Ω!");
    Serial.println("  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SSID –∏ –ø–∞—Ä–æ–ª—å");
    signalError(LED_RED);
    beep(5, 200);
  }
}

String getCardUID() {
  String uid = "";
  for (byte i = 0; i < rfidReader.uid.size; i++) {
    if (rfidReader.uid.uidByte[i] < 0x10) {
      uid += "0";
    }
    uid += String(rfidReader.uid.uidByte[i], HEX);
  }
  uid.toUpperCase();
  return uid;
}

bool sendToServer(String cardUID) {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("  ‚úó WiFi –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!");
    return false;
  }
  
  HTTPClient http;
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è Security API
  String url = String(server_url) + "/security/api/scan/";
  http.begin(url);
  http.addHeader("Content-Type", "application/json");
  http.setTimeout(10000);  // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
  
  // –°–æ–∑–¥–∞–µ–º JSON payload
  StaticJsonDocument<512> doc;
  doc["rfid_uid"] = cardUID;
  doc["device_id"] = device_id;
  
  String payload;
  serializeJson(doc, payload);
  
  Serial.print("  URL: ");
  Serial.println(url);
  Serial.print("  Payload: ");
  Serial.println(payload);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å
  int httpCode = http.POST(payload);
  
  if (httpCode > 0) {
    Serial.print("  HTTP –∫–æ–¥: ");
    Serial.println(httpCode);
    
    String response = http.getString();
    Serial.print("  –û—Ç–≤–µ—Ç: ");
    Serial.println(response);
    
    if (httpCode == 200) {
      // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
      StaticJsonDocument<2048> responseDoc;
      DeserializationError error = deserializeJson(responseDoc, response);
      
      if (!error && responseDoc["success"] == true) {
        // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
        String employeeName = responseDoc["employee_name"] | "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π";
        String action = responseDoc["action"] | "unknown";
        
        Serial.println("\n  ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
        Serial.print  ("  ‚ïë  üë§ ");
        Serial.print(employeeName);
        for(int i = employeeName.length(); i < 31; i++) Serial.print(" ");
        Serial.println("‚ïë");
        Serial.print  ("  ‚ïë  üö™ ");
        Serial.print(action == "in" ? "–í–•–û–î –í –ó–î–ê–ù–ò–ï" : "–í–´–•–û–î –ò–ó –ó–î–ê–ù–ò–Ø");
        for(int i = (action == "in" ? 13 : 15); i < 31; i++) Serial.print(" ");
        Serial.println("‚ïë");
        Serial.println("  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n");
        
        http.end();
        return true;
      }
    }
  } else {
    Serial.print("  ‚úó HTTP –æ—à–∏–±–∫–∞: ");
    Serial.println(httpCode);
    Serial.print("  –û–ø–∏—Å–∞–Ω–∏–µ: ");
    Serial.println(http.errorToString(httpCode));
  }
  
  http.end();
  return false;
}

void signalSuccess(int ledPin) {
  digitalWrite(ledPin, HIGH);
  delay(1000);
  digitalWrite(ledPin, LOW);
}

void signalError(int ledPin) {
  for (int i = 0; i < 3; i++) {
    digitalWrite(ledPin, HIGH);
    delay(200);
    digitalWrite(ledPin, LOW);
    delay(200);
  }
}

void beep(int count, int duration) {
  for (int i = 0; i < count; i++) {
    digitalWrite(BUZZER_PIN, HIGH);
    delay(duration);
    digitalWrite(BUZZER_PIN, LOW);
    if (i < count - 1) {
      delay(duration / 2);
    }
  }
}

/*
 * ========================================
 * –°–•–ï–ú–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø RC522 –∫ ESP32:
 * ========================================
 * 
 * RC522 ‚Üí ESP32
 * ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 * SDA   ‚Üí GPIO 21
 * SCK   ‚Üí GPIO 18
 * MOSI  ‚Üí GPIO 23
 * MISO  ‚Üí GPIO 19
 * IRQ   ‚Üí –Ω–µ –ø–æ–¥–∫–ª—é—á–∞—Ç—å
 * GND   ‚Üí GND
 * RST   ‚Üí GPIO 22
 * 3.3V  ‚Üí 3.3V
 * 
 * LED –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (—Å —Ä–µ–∑–∏—Å—Ç–æ—Ä–∞–º–∏ 220 Œ©):
 * ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 * GPIO 25 ‚Üí 220Œ© ‚Üí LED –∑–µ–ª–µ–Ω—ã–π ‚Üí GND (–¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω)
 * GPIO 26 ‚Üí 220Œ© ‚Üí LED –∫—Ä–∞—Å–Ω—ã–π ‚Üí GND (–¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω)
 * GPIO 27 ‚Üí 220Œ© ‚Üí LED —Å–∏–Ω–∏–π   ‚Üí GND (—Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã)
 * 
 * Buzzer (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):
 * ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 * GPIO 23 ‚Üí Buzzer+ ‚Üí Buzzer- ‚Üí GND
 * 
 * –ü–ò–¢–ê–ù–ò–ï:
 * ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 * USB –∫–∞–±–µ–ª—å –æ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π –∑–∞—Ä—è–¥–∫–∏
 * 5V 1A –º–∏–Ω–∏–º—É–º, 5V 2A —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è
 * 
 * –ú–û–ù–¢–ê–ñ –í –ö–û–†–û–ë–ö–ï:
 * ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 * 1. RC522 –Ω–∞ –∫—Ä—ã—à–∫–µ (–∏–∑–Ω—É—Ç—Ä–∏ –¥–≤–æ–π–Ω–æ–π —Å–∫–æ—Ç—á)
 * 2. ESP32 –Ω–∞ –¥–Ω–µ –∫–æ—Ä–æ–±–∫–∏ (–≤–∏–Ω—Ç—ã –∏–ª–∏ —Å–∫–æ—Ç—á)
 * 3. LED –Ω–∞ –ø–µ—Ä–µ–¥–Ω–µ–π –ø–∞–Ω–µ–ª–∏:
 *    - –ó–µ–ª–µ–Ω—ã–π (–≤—Ö–æ–¥ —Ä–∞–∑—Ä–µ—à–µ–Ω)
 *    - –ö—Ä–∞—Å–Ω—ã–π (–≤—Ö–æ–¥ –∑–∞–ø—Ä–µ—â–µ–Ω)
 *    - –°–∏–Ω–∏–π (—Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç)
 * 4. USB –∫–∞–±–µ–ª—å —á–µ—Ä–µ–∑ –±–æ–∫–æ–≤–æ–µ –æ—Ç–≤–µ—Ä—Å—Ç–∏–µ
 * 5. Buzzer –Ω–∞ –±–æ–∫–æ–≤–æ–π —Å—Ç–µ–Ω–∫–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * 
 * –†–ï–ó–ò–°–¢–û–†–´ (–Ω–∞ –∫–∞–∂–¥—ã–π LED):
 * ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 * - 3x 220 Œ© –¥–ª—è LED (–∑–µ–ª–µ–Ω—ã–π, –∫—Ä–∞—Å–Ω—ã–π, —Å–∏–Ω–∏–π)
 * 
 * –ü–û–í–ï–î–ï–ù–ò–ï –°–ò–ù–ï–ì–û LED:
 * ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 * - –ú–∏–≥–∞–µ—Ç —Ä–∞–∑ –≤ 5 —Å–µ–∫—É–Ω–¥ = —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ
 * - –ì–æ—Ä–∏—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ = –Ω–µ—Ç WiFi —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 * - –ù–µ –≥–æ—Ä–∏—Ç = –ø—Ä–æ–±–ª–µ–º–∞ —Å ESP32
 * 
 * –ó–í–£–ö–û–í–´–ï –°–ò–ì–ù–ê–õ–´:
 * ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 * - 2 —Å—Ä–µ–¥–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–∞ = –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω
 * - 1 –¥–ª–∏–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª = –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω
 * - 3 –∫–æ—Ä–æ—Ç–∫–∏—Ö = –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
 * - 5 –¥–ª–∏–Ω–Ω—ã—Ö = –æ—à–∏–±–∫–∞ WiFi
 * 
 * –ù–ê–°–¢–†–û–ô–ö–ê:
 * ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 * 1. –ò–∑–º–µ–Ω–∏ WiFi SSID –∏ –ø–∞—Ä–æ–ª—å (—Å—Ç—Ä–æ–∫–∏ 21-22)
 * 2. –ü—Ä–æ–≤–µ—Ä—å server_url (—Å—Ç—Ä–æ–∫–∞ 23)
 * 3. –ò–∑–º–µ–Ω–∏ device_id –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (—Å—Ç—Ä–æ–∫–∞ 24)
 * 4. –ó–∞–≥—Ä—É–∑–∏ –Ω–∞ ESP32
 * 5. –û—Ç–∫—Ä–æ–π Serial Monitor (115200 baud)
 * 6. –ü—Ä–∏–ª–æ–∂–∏ RFID –∫–∞—Ä—Ç—É
 * 7. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–µ–ª–µ–Ω—ã–π –∏–ª–∏ –∫—Ä–∞—Å–Ω—ã–π LED + –∑–≤—É–∫
 * 
 * –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï:
 * ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 * 1. –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ - —Å–∏–Ω–∏–π LED –¥–æ–ª–∂–µ–Ω –º–∏–≥–∞—Ç—å —Ä–∞–∑ –≤ 5 —Å–µ–∫
 * 2. –ü—Ä–∏–ª–æ–∂–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É:
 *    - –ó–µ–ª–µ–Ω—ã–π LED –∑–∞–≥–æ—Ä–∏—Ç—Å—è –Ω–∞ 1 —Å–µ–∫
 *    - 2 —Å—Ä–µ–¥–Ω–∏—Ö –∑–≤—É–∫–∞
 *    - –í Serial: "–î–û–°–¢–£–ü –†–ê–ó–†–ï–®–ï–ù"
 * 3. –ü—Ä–∏–ª–æ–∂–∏ –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É:
 *    - –ö—Ä–∞—Å–Ω—ã–π LED –º–æ—Ä–≥–∞–µ—Ç 3 —Ä–∞–∑–∞
 *    - 1 –¥–ª–∏–Ω–Ω—ã–π –∑–≤—É–∫
 *    - –í Serial: "–î–û–°–¢–£–ü –ó–ê–ü–†–ï–©–ï–ù"
 * 
 */

