# employees/admin.py
from django.contrib import admin
from django.utils.html import format_html
from .models import Employee, CardAccess, WorkTimeEntry

@admin.register(Employee)
class EmployeeAdmin(admin.ModelAdmin):
    list_display = [
        'photo_thumbnail', 'get_full_name', 'employee_id', 
        'department', 'position', 'get_age_display', 'phone',
        'rfid_status', 'is_active'
    ]
    
    list_filter = [
        'department', 'position', 'is_active', 'gender', 
        'marital_status', 'hire_date'
    ]
    
    search_fields = [
        'first_name', 'last_name', 'middle_name', 'employee_id', 
        'rfid_uid', 'phone', 'email', 'inn', 'snils'
    ]
    
    list_editable = ['is_active']
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ–ª–µ–π –≤ –∞–¥–º–∏–Ω–∫–µ
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('first_name', 'last_name', 'middle_name', 'photo'),
            'classes': ('wide',)
        }),
        ('–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', {
            'fields': ('birth_date', 'gender', 'marital_status'),
            'classes': ('collapse',)
        }),
        ('–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('phone', 'email', 'address'),
            'classes': ('collapse',)
        }),
        ('–î–æ–∫—É–º–µ–Ω—Ç—ã', {
            'fields': (
                ('passport_series', 'passport_number'),
                ('passport_issued_date', 'passport_issued_by'),
                ('inn', 'snils')
            ),
            'classes': ('collapse',)
        }),
        ('–†–∞–±–æ—á–∏–µ –¥–∞–Ω–Ω—ã–µ', {
            'fields': ('employee_id', 'department', 'position', 'hire_date', 'is_active'),
            'classes': ('wide',)
        }),
        ('RFID –¥–æ—Å—Ç—É–ø', {
            'fields': ('rfid_uid',),
            'classes': ('wide',)
        }),
    )
    
    # –¢–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
    readonly_fields = ['created_at', 'updated_at']
    
    # –ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    ordering = ['last_name', 'first_name']
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    list_per_page = 25
    
    def photo_thumbnail(self, obj):
        """–ú–∏–Ω–∏–∞—Ç—é—Ä–∞ —Ñ–æ—Ç–æ –¥–ª—è —Å–ø–∏—Å–∫–∞"""
        if obj.photo:
            return format_html(
                '<img src="{}" width="50" height="50" style="border-radius: 50%; object-fit: cover;" />',
                obj.photo.url
            )
        return format_html(
            '<div style="width:50px;height:50px;background:#ddd;border-radius:50%;'
            'display:flex;align-items:center;justify-content:center;font-size:20px;">üë§</div>'
        )
    photo_thumbnail.short_description = '–§–æ—Ç–æ'
    
    def get_full_name(self, obj):
        """–ü–æ–ª–Ω–æ–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
        return obj.get_full_name()
    get_full_name.short_description = '–§–ò–û'
    get_full_name.admin_order_field = 'last_name'
    
    def get_age_display(self, obj):
        """–í–æ–∑—Ä–∞—Å—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
        age = obj.get_age()
        if age:
            return f"{age} –ª–µ—Ç"
        return "‚Äî"
    get_age_display.short_description = '–í–æ–∑—Ä–∞—Å—Ç'
    
    def rfid_status(self, obj):
        """–°—Ç–∞—Ç—É—Å RFID –∫–∞—Ä—Ç—ã"""
        if obj.rfid_uid:
            return format_html(
                '<span style="color: #4caf50; font-size: 16px;" title="RFID: {}">üé´</span>',
                obj.rfid_uid
            )
        return format_html(
            '<span style="color: #f44336; font-size: 16px;" title="RFID –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω">‚ùå</span>'
        )
    rfid_status.short_description = 'RFID'
    
    # –î–µ–π—Å—Ç–≤–∏—è
    actions = ['activate_employees', 'deactivate_employees', 'export_to_csv']
    
    def activate_employees(self, request, queryset):
        """–ú–∞—Å—Å–æ–≤–æ–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
        updated = queryset.update(is_active=True)
        self.message_user(
            request,
            f'–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {updated} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.'
        )
    activate_employees.short_description = "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"
    
    def deactivate_employees(self, request, queryset):
        """–ú–∞—Å—Å–æ–≤–æ–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
        updated = queryset.update(is_active=False)
        self.message_user(
            request,
            f'–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {updated} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.'
        )
    deactivate_employees.short_description = "–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"
    
    def export_to_csv(self, request, queryset):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV"""
        import csv
        from django.http import HttpResponse
        from datetime import datetime
        
        response = HttpResponse(content_type='text/csv; charset=utf-8')
        response['Content-Disposition'] = f'attachment; filename="employees_{datetime.now().strftime("%Y%m%d")}.csv"'
        response.write('\ufeff')  # BOM –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Excel
        
        writer = csv.writer(response)
        writer.writerow([
            '–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä', '–§–∞–º–∏–ª–∏—è', '–ò–º—è', '–û—Ç—á–µ—Å—Ç–≤–æ', 
            '–û—Ç–¥–µ–ª', '–î–æ–ª–∂–Ω–æ—Å—Ç—å', '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è', '–ü–æ–ª',
            '–¢–µ–ª–µ—Ñ–æ–Ω', 'Email', '–î–∞—Ç–∞ –ø—Ä–∏–µ–º–∞', 'RFID', '–ê–∫—Ç–∏–≤–µ–Ω'
        ])
        
        for employee in queryset:
            writer.writerow([
                employee.employee_id,
                employee.last_name,
                employee.first_name,
                employee.middle_name or '',
                employee.department,
                employee.position,
                employee.birth_date.strftime('%d.%m.%Y') if employee.birth_date else '',
                employee.get_gender_display(),
                employee.phone or '',
                employee.email or '',
                employee.hire_date.strftime('%d.%m.%Y'),
                employee.rfid_uid or '',
                '–î–∞' if employee.is_active else '–ù–µ—Ç'
            ])
        
        self.message_user(
            request,
            f'–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {queryset.count()} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ CSV.'
        )
        return response
    export_to_csv.short_description = "–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV"


@admin.register(CardAccess)
class CardAccessAdmin(admin.ModelAdmin):
    list_display = [
        'get_employee_name', 'timestamp', 'rfid_uid', 
        'device_id', 'success_icon', 'get_department'
    ]
    
    list_filter = [
        'success', 'device_id', 'timestamp', 
        'employee__department', 'employee__is_active'
    ]
    
    search_fields = [
        'employee__first_name', 'employee__last_name', 
        'employee__employee_id', 'rfid_uid'
    ]
    
    readonly_fields = ['timestamp']
    date_hierarchy = 'timestamp'
    
    # –£–±–∏—Ä–∞–µ–º slice –∏–∑ get_queryset –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–∫–∏
    def get_queryset(self, request):
        qs = super().get_queryset(request)
        return qs.select_related('employee').order_by('-timestamp')
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    list_per_page = 100
    list_max_show_all = 500
    
    def get_employee_name(self, obj):
        """–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å —Ñ–æ—Ç–æ"""
        if obj.employee:
            if obj.employee.photo:
                return format_html(
                    '<div style="display: flex; align-items: center; gap: 10px;">'
                    '<img src="{}" width="30" height="30" style="border-radius: 50%; object-fit: cover;" />'
                    '<span>{}</span></div>',
                    obj.employee.photo.url,
                    obj.employee.get_full_name()
                )
            else:
                return format_html(
                    '<div style="display: flex; align-items: center; gap: 10px;">'
                    '<div style="width:30px;height:30px;background:#ddd;border-radius:50%;'
                    'display:flex;align-items:center;justify-content:center;font-size:12px;">üë§</div>'
                    '<span>{}</span></div>',
                    obj.employee.get_full_name()
                )
        return format_html(
            '<span style="color: #f44336;">–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞</span>'
        )
    get_employee_name.short_description = '–°–æ—Ç—Ä—É–¥–Ω–∏–∫'
    get_employee_name.admin_order_field = 'employee__last_name'
    
    def success_icon(self, obj):
        """–ò–∫–æ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–∞"""
        if obj.success:
            return format_html(
                '<span style="color: #4caf50; font-size: 16px;" title="–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω">‚úÖ</span>'
            )
        return format_html(
            '<span style="color: #f44336; font-size: 16px;" title="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω">‚ùå</span>'
        )
    success_icon.short_description = '–°—Ç–∞—Ç—É—Å'
    success_icon.admin_order_field = 'success'
    
    def get_department(self, obj):
        """–û—Ç–¥–µ–ª —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
        if obj.employee:
            return obj.employee.department
        return "‚Äî"
    get_department.short_description = '–û—Ç–¥–µ–ª'
    get_department.admin_order_field = 'employee__department'
    
    # –î–µ–π—Å—Ç–≤–∏—è
    actions = ['export_access_log']
    
    def export_access_log(self, request, queryset):
        """–≠–∫—Å–ø–æ—Ä—Ç –∂—É—Ä–Ω–∞–ª–∞ –¥–æ—Å—Ç—É–ø–∞ –≤ CSV"""
        import csv
        from django.http import HttpResponse
        from datetime import datetime
        
        response = HttpResponse(content_type='text/csv; charset=utf-8')
        response['Content-Disposition'] = f'attachment; filename="access_log_{datetime.now().strftime("%Y%m%d")}.csv"'
        response.write('\ufeff')  # BOM –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Excel
        
        writer = csv.writer(response)
        writer.writerow([
            '–í—Ä–µ–º—è', '–§–ò–û', '–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä', '–û—Ç–¥–µ–ª', 
            'RFID', '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', '–°—Ç–∞—Ç—É—Å'
        ])
        
        for access in queryset.order_by('-timestamp'):
            writer.writerow([
                access.timestamp.strftime('%d.%m.%Y %H:%M:%S'),
                access.employee.get_full_name() if access.employee else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π',
                access.employee.employee_id if access.employee else '',
                access.employee.department if access.employee else '',
                access.rfid_uid,
                access.device_id,
                '–£—Å–ø–µ—à–Ω–æ' if access.success else '–û—à–∏–±–∫–∞'
            ])
        
        self.message_user(
            request,
            f'–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {queryset.count()} –∑–∞–ø–∏—Å–µ–π –¥–æ—Å—Ç—É–ø–∞ –≤ CSV.'
        )
        return response
    export_access_log.short_description = "–≠–∫—Å–ø–æ—Ä—Ç –∂—É—Ä–Ω–∞–ª–∞ –¥–æ—Å—Ç—É–ø–∞"


@admin.register(WorkTimeEntry)
class WorkTimeEntryAdmin(admin.ModelAdmin):
    list_display = [
        'get_employee_name', 'date', 'entry_time', 'exit_time', 
        'get_hours_display', 'get_status_display', 'get_overtime_display'
    ]
    
    list_filter = [
        'status', 'date', 'is_manual_entry', 'is_corrected',
        'employee__department', 'employee__is_active'
    ]
    
    search_fields = [
        'employee__first_name', 'employee__last_name', 
        'employee__employee_id', 'notes'
    ]
    
    date_hierarchy = 'date'
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('employee', 'date', 'status')
        }),
        ('–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã', {
            'fields': ('entry_time', 'exit_time', 'hours_worked')
        }),
        ('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞', {
            'fields': ('entry_device', 'exit_device'),
            'classes': ('collapse',)
        }),
        ('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ', {
            'fields': ('is_manual_entry', 'is_corrected', 'notes', 'created_by'),
            'classes': ('collapse',)
        }),
    )
    
    readonly_fields = ['hours_worked', 'created_at', 'updated_at']
    
    list_per_page = 50
    ordering = ['-date', 'employee__last_name']
    
    def get_employee_name(self, obj):
        """–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å –æ—Ç–¥–µ–ª–æ–º"""
        return format_html(
            '<div><strong>{}</strong><br><small style="color: #666;">{}</small></div>',
            obj.employee.get_full_name(),
            obj.employee.department
        )
    get_employee_name.short_description = '–°–æ—Ç—Ä—É–¥–Ω–∏–∫'
    get_employee_name.admin_order_field = 'employee__last_name'
    
    def get_hours_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Å–æ–≤"""
        if obj.hours_worked:
            hours = int(obj.hours_worked)
            minutes = int((obj.hours_worked - hours) * 60)
            color = '#4caf50' if obj.is_full_day() else '#ff9800'
            return format_html(
                '<span style="color: {}; font-weight: bold;">{}—á {}–º</span>',
                color, hours, minutes
            )
        return format_html('<span style="color: #999;">‚Äî</span>')
    get_hours_display.short_description = '–ß–∞—Å—ã'
    get_hours_display.admin_order_field = 'hours_worked'
    
    def get_status_display(self, obj):
        """–¶–≤–µ—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        color = obj.get_status_display_color()
        return format_html(
            '<span style="color: {}; font-weight: bold;">‚óè</span> {}',
            color, obj.get_status_display()
        )
    get_status_display.short_description = '–°—Ç–∞—Ç—É—Å'
    get_status_display.admin_order_field = 'status'
    
    def get_overtime_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã—Ö"""
        if obj.is_overtime():
            overtime = obj.get_overtime_hours()
            return format_html(
                '<span style="color: #2196f3; font-weight: bold;">+{:.1f}—á</span>',
                overtime
            )
        return ''
    get_overtime_display.short_description = '–°–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã–µ'
    
    # –î–µ–π—Å—Ç–≤–∏—è
    actions = ['mark_as_corrected', 'export_worktime_report']
    
    def mark_as_corrected(self, request, queryset):
        """–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ"""
        updated = queryset.update(is_corrected=True, created_by=request.user)
        self.message_user(
            request,
            f'–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: {updated} –∑–∞–ø–∏—Å–µ–π.'
        )
    mark_as_corrected.short_description = "–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ"
    
    def export_worktime_report(self, request, queryset):
        """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –ø–æ —Ä–∞–±–æ—á–µ–º—É –≤—Ä–µ–º–µ–Ω–∏"""
        import csv
        from django.http import HttpResponse
        from datetime import datetime
        
        response = HttpResponse(content_type='text/csv; charset=utf-8')
        response['Content-Disposition'] = f'attachment; filename="worktime_report_{datetime.now().strftime("%Y%m%d")}.csv"'
        response.write('\ufeff')
        
        writer = csv.writer(response)
        writer.writerow([
            '–î–∞—Ç–∞', '–§–ò–û', '–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä', '–û—Ç–¥–µ–ª', 
            '–ü—Ä–∏—Ö–æ–¥', '–£—Ö–æ–¥', '–ß–∞—Å—ã', '–°—Ç–∞—Ç—É—Å', '–ü—Ä–∏–º–µ—á–∞–Ω–∏—è'
        ])
        
        for entry in queryset.order_by('date', 'employee__last_name'):
            writer.writerow([
                entry.date.strftime('%d.%m.%Y'),
                entry.employee.get_full_name(),
                entry.employee.employee_id,
                entry.employee.department,
                entry.entry_time.strftime('%H:%M') if entry.entry_time else '',
                entry.exit_time.strftime('%H:%M') if entry.exit_time else '',
                f'{entry.hours_worked:.2f}' if entry.hours_worked else '',
                entry.get_status_display(),
                entry.notes or ''
            ])
        
        self.message_user(
            request,
            f'–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {queryset.count()} –∑–∞–ø–∏—Å–µ–π —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.'
        )
        return response
    export_worktime_report.short_description = "–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏"


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∫–∏
admin.site.site_header = "ERP –°–∏—Å—Ç–µ–º–∞ - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏"
admin.site.site_title = "ERP Admin"
admin.site.index_title = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"