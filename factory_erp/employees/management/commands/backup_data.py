# employees/management/commands/backup_data.py
from django.core.management.base import BaseCommand
from django.core import serializers
from django.conf import settings
import os
import json
from datetime import datetime
from employees.models import Employee, CardAccess, WorkTimeEntry

class Command(BaseCommand):
    help = '–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–∞–Ω–Ω—ã—Ö ERP —Å–∏—Å—Ç–µ–º—ã'

    def add_arguments(self, parser):
        parser.add_argument(
            '--format',
            type=str,
            default='json',
            help='–§–æ—Ä–º–∞—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ (json, xml)'
        )
        parser.add_argument(
            '--output',
            type=str,
            help='–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏'
        )

    def handle(self, *args, **options):
        format_type = options['format']
        output_path = options.get('output')
        
        if not output_path:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            output_path = f'backup_erp_{timestamp}.{format_type}'
        
        self.stdout.write(f'–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {format_type}...')
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            employees = Employee.objects.all()
            card_accesses = CardAccess.objects.all()
            worktime_entries = WorkTimeEntry.objects.all()
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            data = {
                'employees': serializers.serialize(format_type, employees),
                'card_accesses': serializers.serialize(format_type, card_accesses),
                'worktime_entries': serializers.serialize(format_type, worktime_entries),
                'backup_info': {
                    'created_at': datetime.now().isoformat(),
                    'total_employees': employees.count(),
                    'total_accesses': card_accesses.count(),
                    'total_worktime': worktime_entries.count()
                }
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            with open(output_path, 'w', encoding='utf-8') as f:
                if format_type == 'json':
                    json.dump(data, f, ensure_ascii=False, indent=2)
                else:
                    f.write(data)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = os.path.getsize(output_path)
            file_size_mb = file_size / (1024 * 1024)
            
            self.stdout.write(f'‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {output_path}')
            self.stdout.write(f'üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size_mb:.2f} –ú–ë')
            self.stdout.write(f'üìä –î–∞–Ω–Ω—ã—Ö:')
            self.stdout.write(f'  ‚Ä¢ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {employees.count()}')
            self.stdout.write(f'  ‚Ä¢ –ó–∞–ø–∏—Å–µ–π –¥–æ—Å—Ç—É–ø–∞: {card_accesses.count()}')
            self.stdout.write(f'  ‚Ä¢ –ó–∞–ø–∏—Å–µ–π —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {worktime_entries.count()}')
            
        except Exception as e:
            self.stdout.write(f'‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}')
            raise
