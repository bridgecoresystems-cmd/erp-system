# employees/management/commands/generate_reports.py
from django.core.management.base import BaseCommand
from django.db.models import Count, Sum, Avg
from django.utils import timezone
from datetime import date, timedelta
import csv
import os
from employees.models import Employee, CardAccess, WorkTimeEntry

class Command(BaseCommand):
    help = '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –ø–æ ERP —Å–∏—Å—Ç–µ–º–µ'

    def add_arguments(self, parser):
        parser.add_argument(
            '--type',
            type=str,
            choices=['daily', 'weekly', 'monthly', 'yearly'],
            default='monthly',
            help='–¢–∏–ø –æ—Ç—á–µ—Ç–∞'
        )
        parser.add_argument(
            '--output',
            type=str,
            help='–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞'
        )

    def handle(self, *args, **options):
        report_type = options['type']
        output_path = options.get('output')
        
        if not output_path:
            timestamp = timezone.now().strftime('%Y%m%d_%H%M%S')
            output_path = f'report_{report_type}_{timestamp}.csv'
        
        self.stdout.write(f'–ì–µ–Ω–µ—Ä–∞—Ü–∏—è {report_type} –æ—Ç—á–µ—Ç–∞...')
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
            today = date.today()
            if report_type == 'daily':
                start_date = today
                end_date = today
            elif report_type == 'weekly':
                start_date = today - timedelta(days=7)
                end_date = today
            elif report_type == 'monthly':
                start_date = today.replace(day=1)
                end_date = today
            else:  # yearly
                start_date = today.replace(month=1, day=1)
                end_date = today
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
            with open(output_path, 'w', newline='', encoding='utf-8') as csvfile:
                writer = csv.writer(csvfile)
                
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫
                writer.writerow([
                    '–û—Ç—á–µ—Ç –ø–æ ERP —Å–∏—Å—Ç–µ–º–µ',
                    f'–ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}',
                    f'–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {timezone.now().strftime("%d.%m.%Y %H:%M")}'
                ])
                writer.writerow([])
                
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                writer.writerow(['–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê'])
                writer.writerow(['–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å', '–ó–Ω–∞—á–µ–Ω–∏–µ'])
                
                total_employees = Employee.objects.filter(is_active=True).count()
                writer.writerow(['–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤', total_employees])
                
                total_accesses = CardAccess.objects.filter(
                    timestamp__date__range=[start_date, end_date],
                    success=True
                ).count()
                writer.writerow(['–ö–∞—Å–∞–Ω–∏–π –∫–∞—Ä—Ç', total_accesses])
                
                unique_employees = CardAccess.objects.filter(
                    timestamp__date__range=[start_date, end_date],
                    success=True
                ).values('employee').distinct().count()
                writer.writerow(['–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤', unique_employees])
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º
                writer.writerow([])
                writer.writerow(['–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –û–¢–î–ï–õ–ê–ú'])
                writer.writerow(['–û—Ç–¥–µ–ª', '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤', '–ö–∞—Å–∞–Ω–∏–π', '–°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å'])
                
                departments = Employee.objects.filter(is_active=True).values('department').annotate(
                    count=Count('id')
                ).order_by('-count')
                
                for dept in departments:
                    dept_name = dept['department']
                    dept_count = dept['count']
                    
                    dept_accesses = CardAccess.objects.filter(
                        employee__department=dept_name,
                        timestamp__date__range=[start_date, end_date],
                        success=True
                    ).count()
                    
                    days = (end_date - start_date).days + 1
                    avg_per_day = dept_accesses / days if days > 0 else 0
                    
                    writer.writerow([dept_name, dept_count, dept_accesses, f'{avg_per_day:.1f}'])
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                writer.writerow([])
                writer.writerow(['–°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ê–ë–û–ß–ï–ì–û –í–†–ï–ú–ï–ù–ò'])
                writer.writerow(['–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å', '–ó–Ω–∞—á–µ–Ω–∏–µ'])
                
                worktime_entries = WorkTimeEntry.objects.filter(
                    date__range=[start_date, end_date]
                )
                
                total_hours = worktime_entries.aggregate(
                    total=Sum('hours_worked')
                )['total'] or 0
                writer.writerow(['–û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã (—á–∞—Å—ã)', f'{total_hours:.1f}'])
                
                avg_hours = worktime_entries.aggregate(
                    avg=Avg('hours_worked')
                )['avg'] or 0
                writer.writerow(['–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã (—á–∞—Å—ã)', f'{avg_hours:.1f}'])
                
                present_days = worktime_entries.filter(status='present').count()
                writer.writerow(['–ü–æ–ª–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π', present_days])
                
                late_days = worktime_entries.filter(status='late').count()
                writer.writerow(['–û–ø–æ–∑–¥–∞–Ω–∏–π', late_days])
                
                # –¢–æ–ø —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                writer.writerow([])
                writer.writerow(['–¢–û–ü-10 –°–ê–ú–´–• –ê–ö–¢–ò–í–ù–´–• –°–û–¢–†–£–î–ù–ò–ö–û–í'])
                writer.writerow(['–§–ò–û', '–û—Ç–¥–µ–ª', '–ö–∞—Å–∞–Ω–∏–π', '–ß–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã'])
                
                top_employees = CardAccess.objects.filter(
                    timestamp__date__range=[start_date, end_date],
                    success=True,
                    employee__is_active=True
                ).values(
                    'employee__first_name',
                    'employee__last_name',
                    'employee__department'
                ).annotate(
                    access_count=Count('id')
                ).order_by('-access_count')[:10]
                
                for emp in top_employees:
                    full_name = f"{emp['employee__last_name']} {emp['employee__first_name']}"
                    dept = emp['employee__department']
                    accesses = emp['access_count']
                    
                    # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã
                    work_hours = WorkTimeEntry.objects.filter(
                        employee__first_name=emp['employee__first_name'],
                        employee__last_name=emp['employee__last_name'],
                        date__range=[start_date, end_date]
                    ).aggregate(total=Sum('hours_worked'))['total'] or 0
                    
                    writer.writerow([full_name, dept, accesses, f'{work_hours:.1f}'])
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = os.path.getsize(output_path)
            file_size_kb = file_size / 1024
            
            self.stdout.write(f'‚úÖ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {output_path}')
            self.stdout.write(f'üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size_kb:.1f} –ö–ë')
            self.stdout.write(f'üìä –ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}')
            
        except Exception as e:
            self.stdout.write(f'‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}')
            raise
