# employees/management/commands/optimize_database.py
from django.core.management.base import BaseCommand
from django.db import connection
from employees.models import Employee, CardAccess, WorkTimeEntry

class Command(BaseCommand):
    help = '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ERP —Å–∏—Å—Ç–µ–º—ã'

    def handle(self, *args, **options):
        self.stdout.write('–ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        with connection.cursor() as cursor:
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è Employee
            try:
                cursor.execute("CREATE INDEX IF NOT EXISTS idx_employee_rfid ON employees_employee(rfid_uid);")
                cursor.execute("CREATE INDEX IF NOT EXISTS idx_employee_active ON employees_employee(is_active);")
                cursor.execute("CREATE INDEX IF NOT EXISTS idx_employee_department ON employees_employee(department);")
                self.stdout.write('‚úì –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è Employee —Å–æ–∑–¥–∞–Ω—ã')
            except Exception as e:
                self.stdout.write(f'‚ö† –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ Employee: {e}')
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è CardAccess
            try:
                cursor.execute("CREATE INDEX IF NOT EXISTS idx_cardaccess_timestamp ON employees_cardaccess(timestamp);")
                cursor.execute("CREATE INDEX IF NOT EXISTS idx_cardaccess_success ON employees_cardaccess(success);")
                cursor.execute("CREATE INDEX IF NOT EXISTS idx_cardaccess_employee ON employees_cardaccess(employee_id);")
                self.stdout.write('‚úì –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è CardAccess —Å–æ–∑–¥–∞–Ω—ã')
            except Exception as e:
                self.stdout.write(f'‚ö† –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ CardAccess: {e}')
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è WorkTimeEntry
            try:
                cursor.execute("CREATE INDEX IF NOT EXISTS idx_worktime_date ON employees_worktimeentry(date);")
                cursor.execute("CREATE INDEX IF NOT EXISTS idx_worktime_employee ON employees_worktimeentry(employee_id);")
                cursor.execute("CREATE INDEX IF NOT EXISTS idx_worktime_status ON employees_worktimeentry(status);")
                self.stdout.write('‚úì –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è WorkTimeEntry —Å–æ–∑–¥–∞–Ω—ã')
            except Exception as e:
                self.stdout.write(f'‚ö† –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ WorkTimeEntry: {e}')
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (—Å—Ç–∞—Ä—à–µ 1 –≥–æ–¥–∞)
        try:
            from datetime import date, timedelta
            one_year_ago = date.today() - timedelta(days=365)
            
            old_accesses = CardAccess.objects.filter(timestamp__date__lt=one_year_ago)
            count = old_accesses.count()
            if count > 0:
                old_accesses.delete()
                self.stdout.write(f'‚úì –£–¥–∞–ª–µ–Ω–æ {count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–æ—Å—Ç—É–ø–∞')
            else:
                self.stdout.write('‚úì –°—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
        except Exception as e:
            self.stdout.write(f'‚ö† –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π: {e}')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            employee_count = Employee.objects.filter(is_active=True).count()
            access_count = CardAccess.objects.count()
            worktime_count = WorkTimeEntry.objects.count()
            
            self.stdout.write('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:')
            self.stdout.write(f'  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {employee_count}')
            self.stdout.write(f'  ‚Ä¢ –ó–∞–ø–∏—Å–µ–π –¥–æ—Å—Ç—É–ø–∞: {access_count}')
            self.stdout.write(f'  ‚Ä¢ –ó–∞–ø–∏—Å–µ–π —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {worktime_count}')
        except Exception as e:
            self.stdout.write(f'‚ö† –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}')
        
        self.stdout.write('\n‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
