# employees/models.py
from django.db import models
from django.contrib.auth.models import User
from django.core.validators import RegexValidator
from datetime import date

class Employee(models.Model):
    # Основные данные сотрудника
    rfid_uid = models.CharField(max_length=20, unique=True, blank=True, null=True, verbose_name="RFID UID")
    first_name = models.CharField(max_length=50, verbose_name="Имя")
    last_name = models.CharField(max_length=50, verbose_name="Фамилия") 
    middle_name = models.CharField(max_length=50, blank=True, verbose_name="Отчество")
    
    # ПЕРСОНАЛЬНЫЕ ДАННЫЕ
    birth_date = models.DateField(null=True, blank=True, verbose_name="Дата рождения")
    
    GENDER_CHOICES = [
        ('M', 'Мужской'),
        ('F', 'Женский'),
    ]
    gender = models.CharField(max_length=1, choices=GENDER_CHOICES, blank=True, verbose_name="Пол")
    
    MARITAL_STATUS_CHOICES = [
        ('single', 'Холост/Не замужем'),
        ('married', 'Женат/Замужем'),
        ('divorced', 'Разведен(а)'),
        ('widowed', 'Вдовец/Вдова'),
    ]
    marital_status = models.CharField(
        max_length=20, 
        choices=MARITAL_STATUS_CHOICES, 
        blank=True, 
        verbose_name="Семейное положение"
    )
    
    # КОНТАКТНАЯ ИНФОРМАЦИЯ
    phone_regex = RegexValidator(
        regex=r'^\+?1?\d{9,15}$',
        message="Номер телефона должен быть в формате: '+999999999'. До 15 цифр."
    )
    phone = models.CharField(
        validators=[phone_regex], 
        max_length=17, 
        blank=True, 
        verbose_name="Телефон"
    )
    
    email = models.EmailField(blank=True, verbose_name="Email")
    
    # АДРЕС
    address = models.TextField(blank=True, verbose_name="Адрес проживания")
    
    # ПАСПОРТНЫЕ ДАННЫЕ
    passport_series_regex = RegexValidator(
        regex=r'^[A-Z]-[A-Z]{2}$',
        message="Серия паспорта должна быть в формате: 'N-XX'"
    )
    passport_number_regex = RegexValidator(
        regex=r'^\d{6}$',
        message="Номер паспорта должен содержать 6 цифр"
    )
    
    passport_series = models.CharField(
        max_length=5,
        validators=[passport_series_regex],
        blank=True,
        verbose_name="Серия паспорта"
    )
    passport_number = models.CharField(
        max_length=6,
        validators=[passport_number_regex],
        blank=True,
        verbose_name="Номер паспорта"
    )
    passport_issued_by = models.CharField(
        max_length=255,
        blank=True,
        verbose_name="Кем выдан"
    )
    passport_issue_date = models.DateField(
        null=True,
        blank=True,
        verbose_name="Дата выдачи"
    )

    # НАЛОГОВЫЕ И СТРАХОВЫЕ ДАННЫЕ
    inn_regex = RegexValidator(
        regex=r'^\d{10}$|^\d{12}$',
        message="ИНН должен содержать 10 или 12 цифр"
    )
    inn = models.CharField(
        validators=[inn_regex],
        max_length=12,
        blank=True,
        verbose_name="ИНН"
    )
    
    snils_regex = RegexValidator(
        regex=r'^\d{11}$',
        message="СНИЛС должен содержать 11 цифр"
    )
    snils = models.CharField(
        validators=[snils_regex],
        max_length=11,
        blank=True,
        verbose_name="СНИЛС"
    )
    
    # Рабочие данные
    department = models.CharField(max_length=100, verbose_name="Цех")
    position = models.CharField(max_length=100, verbose_name="Должность")
    employee_id = models.CharField(max_length=20, unique=True, verbose_name="Табельный номер")
    
    # Фото сотрудника
    photo = models.ImageField(upload_to='employee_photos/', blank=True, null=True, verbose_name="Фото")
    
    # Статус
    is_active = models.BooleanField(default=True, verbose_name="Активен")
    
    # Даты
    hire_date = models.DateField(verbose_name="Дата приема")
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        verbose_name = "Сотрудник"
        verbose_name_plural = "Сотрудники"
        ordering = ['last_name', 'first_name']
    
    def __str__(self):
        return f"{self.last_name} {self.first_name} ({self.department})"
    
    def get_full_name(self):
        if self.middle_name:
            return f"{self.last_name} {self.first_name} {self.middle_name}"
        return f"{self.last_name} {self.first_name}"
    
    def get_photo_url(self):
        if self.photo:
            return self.photo.url
        return '/static/images/no-photo.png'
    
    def get_age(self):
        """Возвращает возраст сотрудника"""
        if self.birth_date:
            today = date.today()
            return today.year - self.birth_date.year - ((today.month, today.day) < (self.birth_date.month, self.birth_date.day))
        return None
    
    def get_passport_full(self):
        """Возвращает полные паспортные данные"""
        if self.passport_series and self.passport_number:
            return f"{self.passport_series} {self.passport_number}"
        return "Не указан"
    
    def get_contact_info(self):
        """Возвращает контактную информацию"""
        contacts = []
        if self.phone:
            contacts.append(f"Тел: {self.phone}")
        if self.email:
            contacts.append(f"Email: {self.email}")
        return ", ".join(contacts) if contacts else "Контакты не указаны"


class CardAccess(models.Model):
    """Модель для логирования касаний карт"""
    employee = models.ForeignKey(Employee, on_delete=models.CASCADE, null=True, blank=True, verbose_name="Сотрудник")
    rfid_uid = models.CharField(max_length=20, verbose_name="RFID UID")
    timestamp = models.DateTimeField(auto_now_add=True, verbose_name="Время касания")
    
    # Дополнительная информация
    device_id = models.CharField(max_length=50, default="ESP32-001", verbose_name="Устройство")
    success = models.BooleanField(default=True, verbose_name="Успешно")
    
    class Meta:
        verbose_name = "Касание карты"
        verbose_name_plural = "Касания карт"
        ordering = ['-timestamp']
    
    def __str__(self):
        if self.employee:
            return f"{self.employee.get_full_name()} - {self.timestamp.strftime('%d.%m.%Y %H:%M:%S')}"
        return f"Неизвестная карта {self.rfid_uid} - {self.timestamp.strftime('%d.%m.%Y %H:%M:%S')}"
