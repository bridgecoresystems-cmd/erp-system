from django.core.management.base import BaseCommand
from lohia_monitor.models import Machine


class Command(BaseCommand):
    help = '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∞–∂–∞'

    def handle(self, *args, **kwargs):
        machine = Machine.objects.first()
        
        if not machine:
            self.stdout.write(self.style.ERROR('‚ùå –°—Ç–∞–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω'))
            return
        
        self.stdout.write(self.style.SUCCESS(f'\nüè≠ –°—Ç–∞–Ω–æ–∫: {machine.name}'))
        self.stdout.write(f'   ESP32 ID: {machine.esp32_id}')
        
        self.stdout.write(self.style.WARNING('\n‚öôÔ∏è  –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç–∞–Ω–∫–∞:'))
        self.stdout.write(f'   Transmit Pulse: {machine.transmit_pulse}')
        self.stdout.write(f'   Gear Box Ratio: {machine.gear_box_ratio}')
        self.stdout.write(f'   Sprocket Gear Box: {machine.sprocket_gear_box}')
        self.stdout.write(f'   Sprocket Takeup Roller: {machine.sprocket_takeup_roller}')
        self.stdout.write(f'   Roller Diameter: {machine.roller_diameter_cm} —Å–º')
        
        self.stdout.write(self.style.WARNING('\nüìä –†–∞—Å—á–µ—Ç:'))
        meters_per_pulse = machine.calculate_meters_per_pulse()
        self.stdout.write(f'   –ú–µ—Ç—Ä–æ–≤ –∑–∞ –∏–º–ø—É–ª—å—Å: {meters_per_pulse:.10f}')
        self.stdout.write(f'   –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π: {machine.meters_per_pulse:.10f}')
        
        self.stdout.write(self.style.WARNING('\nüß™ –¢–µ—Å—Ç –º–µ—Ç—Ä–∞–∂–∞:'))
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∏–º–ø—É–ª—å—Å—ã
        test_pulses = [1, 10, 45, 100, 115, 1000]
        
        for pulses in test_pulses:
            meters = float(pulses * machine.meters_per_pulse)
            self.stdout.write(f'   {pulses:4d} –∏–º–ø—É–ª—å—Å–æ–≤ ‚Üí {meters:8.6f} –º ({meters:6.2f} –º)')
        
        self.stdout.write(self.style.SUCCESS('\n‚úÖ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:'))
        self.stdout.write(f'   –ò–º–ø—É–ª—å—Å—ã: {machine.current_pulse_count}')
        self.stdout.write(f'   –ú–µ—Ç—Ä–∞–∂: {machine.current_meters:.6f} –º')
        self.stdout.write(f'   –û–ø–µ—Ä–∞—Ç–æ—Ä: {machine.current_operator or "–ù–ï–¢"}')

