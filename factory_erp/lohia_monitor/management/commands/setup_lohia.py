# lohia_monitor/management/commands/setup_lohia.py
from django.core.management.base import BaseCommand
from lohia_monitor.models import Machine
from employees.models import Employee

class Command(BaseCommand):
    help = '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞–Ω–∫–∞ Lohia'

    def handle(self, *args, **options):
        self.stdout.write('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞–Ω–∫–∞ Lohia...')
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–æ–∫ Lohia
        machine, created = Machine.objects.get_or_create(
            esp32_id='LOHIA-001',
            defaults={
                'name': '–°—Ç–∞–Ω–æ–∫ Lohia #1',
                'meters_per_pulse': 0.500,  # 0.5 –º–µ—Ç—Ä–∞ –∑–∞ –∏–º–ø—É–ª—å—Å
                'is_active': True,
                'status': 'idle',
            }
        )
        
        if created:
            self.stdout.write(f'‚úÖ –°–æ–∑–¥–∞–Ω —Å—Ç–∞–Ω–æ–∫: {machine.name}')
        else:
            self.stdout.write(f'‚ÑπÔ∏è –°—Ç–∞–Ω–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {machine.name}')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        operators = Employee.objects.filter(department='–°–æ—Ç—Ä—É–¥–Ω–∏–∫_bag', is_active=True)
        masters = Employee.objects.filter(department='–ú–µ—Ö–∞–Ω–∏–∫–∏', is_active=True)
        supervisors = Employee.objects.filter(department='–ù–∞—á–∞–ª—å–Ω–∏–∫_—Ü–µ—Ö–∞', is_active=True)
        
        self.stdout.write(f'\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:')
        self.stdout.write(f'  ‚Ä¢ –û–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: {operators.count()}')
        self.stdout.write(f'  ‚Ä¢ –ú–∞—Å—Ç–µ—Ä–æ–≤: {masters.count()}')
        self.stdout.write(f'  ‚Ä¢ –ù–∞—á–∞–ª—å–Ω–∏–∫–æ–≤ —Ü–µ—Ö–∞: {supervisors.count()}')
        
        if operators.count() == 0:
            self.stdout.write('\n‚ö†Ô∏è –ù–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Å –æ—Ç–¥–µ–ª–æ–º "–°–æ—Ç—Ä—É–¥–Ω–∏–∫_bag"')
            self.stdout.write('   –°–æ–∑–¥–∞–π—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å —ç—Ç–∏–º –æ—Ç–¥–µ–ª–æ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
        
        if masters.count() == 0:
            self.stdout.write('\n‚ö†Ô∏è –ù–µ—Ç –º–∞—Å—Ç–µ—Ä–æ–≤ —Å –æ—Ç–¥–µ–ª–æ–º "–ú–µ—Ö–∞–Ω–∏–∫–∏"')
            self.stdout.write('   –°–æ–∑–¥–∞–π—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å —ç—Ç–∏–º –æ—Ç–¥–µ–ª–æ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
        
        if supervisors.count() == 0:
            self.stdout.write('\n‚ö†Ô∏è –ù–µ—Ç –Ω–∞—á–∞–ª—å–Ω–∏–∫–æ–≤ —Ü–µ—Ö–∞ —Å –æ—Ç–¥–µ–ª–æ–º "–ù–∞—á–∞–ª—å–Ω–∏–∫_—Ü–µ—Ö–∞"')
            self.stdout.write('   –°–æ–∑–¥–∞–π—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å —ç—Ç–∏–º –æ—Ç–¥–µ–ª–æ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
        
        self.stdout.write(f'\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ESP32:')
        self.stdout.write(f'  ‚Ä¢ device_id: LOHIA-001')
        self.stdout.write(f'  ‚Ä¢ URL: /lohia/api/shift/start/')
        self.stdout.write(f'  ‚Ä¢ JSON: {{"esp32_id": "LOHIA-001", "rfid_uid": "XXXX"}}')
        
        self.stdout.write(f'\nüì± API Endpoints:')
        self.stdout.write(f'  ‚Ä¢ –ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã: POST /lohia/api/shift/start/')
        self.stdout.write(f'  ‚Ä¢ –û–∫–æ–Ω—á–∞–Ω–∏–µ —Å–º–µ–Ω—ã: POST /lohia/api/shift/end/')
        self.stdout.write(f'  ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–ø—É–ª—å—Å–æ–≤: POST /lohia/api/pulse/update/')
        self.stdout.write(f'  ‚Ä¢ –í—ã–∑–æ–≤ –º–∞—Å—Ç–µ—Ä–∞: POST /lohia/api/maintenance/call/')
        self.stdout.write(f'  ‚Ä¢ –ù–∞—á–∞–ª–æ —Ä–µ–º–æ–Ω—Ç–∞: POST /lohia/api/maintenance/start/')
        self.stdout.write(f'  ‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–∞: POST /lohia/api/maintenance/end/')
        
        self.stdout.write(f'\nüåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:')
        self.stdout.write(f'  ‚Ä¢ –î–∞—à–±–æ—Ä–¥: /lohia/dashboard/')
        self.stdout.write(f'  ‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —Å–º–µ–Ω: /lohia/shifts/')
        self.stdout.write(f'  ‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –≤—ã–∑–æ–≤–æ–≤: /lohia/maintenance/')
        self.stdout.write(f'  ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: /lohia/stats/')
        
        self.stdout.write('\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Lohia –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!')
