# lohia_monitor/views.py
from django.shortcuts import render, get_object_or_404
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_http_methods
from django.utils import timezone
from django.contrib.auth.decorators import login_required
from django.views.generic import TemplateView
from django.db import models
import json
import logging

from .models import Machine, Shift, MaintenanceCall, PulseLog
from employees.models import Employee

logger = logging.getLogger(__name__)

# ===== API ENDPOINTS –î–õ–Ø ESP32 =====

@csrf_exempt
@require_http_methods(["POST"])
def shift_start_api(request):
    """API –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã"""
    try:
        data = json.loads(request.body)
        esp32_id = data.get('esp32_id')
        rfid_uid = data.get('rfid_uid')
        
        logger.info(f"Shift start request: esp32_id={esp32_id}, rfid_uid='{rfid_uid}'")
        
        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞–Ω–æ–∫
        machine = get_object_or_404(Machine, esp32_id=esp32_id, is_active=True)
        
        # –ù–∞—Ö–æ–¥–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        try:
            operator = Employee.objects.get(rfid_uid__iexact=rfid_uid, is_active=True)
            logger.info(f"Found operator: {operator.get_full_name()} with RFID: '{operator.rfid_uid}'")
        except Employee.DoesNotExist:
            logger.error(f"Employee not found with RFID: '{rfid_uid}'")
            return JsonResponse({
                'success': False,
                'error': f'–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å RFID {rfid_uid} –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }, status=400)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —ç—Ç–æ–º —Å—Ç–∞–Ω–∫–µ
        if machine.current_operator and machine.current_operator != operator:
            return JsonResponse({
                'success': False,
                'error': f'–°—Ç–∞–Ω–æ–∫ —É–∂–µ –∑–∞–Ω—è—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º {machine.current_operator.get_full_name()}'
            }, status=400)
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–º–µ–Ω—É, –µ—Å–ª–∏ –µ—Å—Ç—å
        if machine.current_operator:
            active_shift = Shift.objects.filter(
                machine=machine, 
                operator=machine.current_operator, 
                status='active'
            ).first()
            if active_shift:
                active_shift.complete_shift()
        
        # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å–º–µ–Ω—É
        machine.start_shift(operator)
        shift = Shift.objects.create(
            operator=operator,
            machine=machine,
            start_time=timezone.now()
        )
        
        logger.info(f"‚úÖ Shift started: {operator.get_full_name()} on {machine.name}")
        
        return JsonResponse({
            'success': True,
            'message': f'–°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞: {operator.get_full_name()}',
            'shift_id': shift.id,
            'machine': {
                'name': machine.name,
                'status': machine.status
            }
        })
        
    except Exception as e:
        logger.error(f"‚ùå Error in shift_start_api: {str(e)}")
        return JsonResponse({'error': str(e)}, status=500)

@csrf_exempt
@require_http_methods(["POST"])
def shift_end_api(request):
    """API –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã"""
    from django.db import transaction
    
    try:
        data = json.loads(request.body)
        esp32_id = data.get('esp32_id')
        rfid_uid = data.get('rfid_uid')
        
        logger.info(f"Shift end request: esp32_id={esp32_id}, rfid_uid='{rfid_uid}'")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏
        with transaction.atomic():
            # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞–Ω–æ–∫ (—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π —Å—Ç—Ä–æ–∫–∏)
            machine = Machine.objects.select_for_update().get(esp32_id=esp32_id, is_active=True)
            
            # –ù–∞—Ö–æ–¥–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            try:
                operator = Employee.objects.get(rfid_uid__iexact=rfid_uid, is_active=True)
                logger.info(f"Found operator: {operator.get_full_name()} with RFID: '{operator.rfid_uid}'")
            except Employee.DoesNotExist:
                logger.error(f"Employee not found with RFID: '{rfid_uid}'")
                return JsonResponse({
                    'success': False,
                    'error': f'–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å RFID {rfid_uid} –Ω–µ –Ω–∞–π–¥–µ–Ω'
                }, status=400)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —ç—Ç–æ–º —Å—Ç–∞–Ω–∫–µ
            if machine.current_operator != operator:
                return JsonResponse({
                    'success': False,
                    'error': '–í—ã –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –Ω–∞ —ç—Ç–æ–º —Å—Ç–∞–Ω–∫–µ'
                }, status=400)
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–º–µ–Ω—É
            active_shift = Shift.objects.filter(
                machine=machine, 
                operator=operator, 
                status='active'
            ).first()
            
            if active_shift:
                active_shift.total_pulses = machine.current_pulse_count
                active_shift.total_meters = machine.current_meters
                active_shift.complete_shift()
            
            # –ö–†–ò–¢–ò–ß–ù–û: –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–º–µ–Ω—É –Ω–∞ —Å—Ç–∞–Ω–∫–µ –∏ –æ–±–Ω—É–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            logger.info(f"üîÑ –î–æ –æ–±–Ω—É–ª–µ–Ω–∏—è - meters: {machine.current_meters}, pulses: {machine.current_pulse_count}")
            
            # –ù–ï –≤—ã–∑—ã–≤–∞–µ–º end_shift() - –¥–µ–ª–∞–µ–º –≤—Å–µ –≤—Ä—É—á–Ω—É—é!
            # –û–±–Ω—É–ª—è–µ–º –í–°–ï –ø–æ–ª—è –û–î–ù–û–í–†–ï–ú–ï–ù–ù–û
            machine.status = 'idle'
            machine.current_operator = None
            machine.current_pulse_count = 0  # ‚Üê –û–±–Ω—É–ª—è–µ–º –∏–º–ø—É–ª—å—Å—ã (meters –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            
            # –û–î–ò–ù –≤—ã–∑–æ–≤ save() –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
            machine.save()
            
            logger.info(f"‚úÖ –ü–æ—Å–ª–µ save() - meters: {machine.current_meters}, pulses: {machine.current_pulse_count}")
        
        # –ö–†–ò–¢–ò–ß–ù–û: –ü–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º –∏–∑ –ë–î –ü–û–°–õ–ï —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        machine.refresh_from_db()
        logger.info(f"‚úÖ –ü–æ—Å–ª–µ refresh - meters: {machine.current_meters}, pulses: {machine.current_pulse_count}, operator: {machine.current_operator}")
        
        return JsonResponse({
            'success': True,
            'message': f'–°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {operator.get_full_name()}',
            'shift': {
                'total_pulses': active_shift.total_pulses if active_shift else 0,
                'total_meters': float(active_shift.total_meters) if active_shift else 0,
                'duration_hours': active_shift.duration_hours if active_shift else 0
            }
        })
        
    except Machine.DoesNotExist:
        logger.error(f"‚ùå Machine not found with ESP32 ID: {esp32_id}")
        return JsonResponse({'error': '–°—Ç–∞–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω'}, status=404)
    except Exception as e:
        logger.error(f"‚ùå Error in shift_end_api: {str(e)}")
        return JsonResponse({'error': str(e)}, status=500)

@csrf_exempt
@require_http_methods(["POST"])
def pulse_update_api(request):
    """API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∏–º–ø—É–ª—å—Å–æ–≤ (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö —Å–∫–æ—Ä–æ—Å—Ç–µ–π)"""
    from django.db import transaction
    
    try:
        data = json.loads(request.body)
        esp32_id = data.get('esp32_id')
        pulse_count = data.get('pulse_count', 0)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not esp32_id or pulse_count <= 0:
            return JsonResponse({
                'success': False,
                'error': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
            }, status=400)
        
        # –ö–†–ò–¢–ò–ß–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –≤—ã—Å–æ–∫–∏—Ö —á–∞—Å—Ç–æ—Ç–∞—Ö
        with transaction.atomic():
            # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞–Ω–æ–∫ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π —Å—Ç—Ä–æ–∫–∏
            machine = Machine.objects.select_for_update().get(
                esp32_id=esp32_id, 
                is_active=True
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞–Ω–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç
            if not machine.current_operator:
                return JsonResponse({
                    'success': False,
                    'error': '–°—Ç–∞–Ω–æ–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞'
                }, status=400)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—ã—Å–æ–∫–∏—Ö —Å–∫–æ—Ä–æ—Å—Ç–µ–π)
            old_pulses = machine.current_pulse_count
            old_meters = machine.current_meters
            
            # –ê–¢–û–ú–ê–†–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∏–º–ø—É–ª—å—Å–æ–≤
            machine.current_pulse_count += pulse_count
            machine.save(update_fields=['current_pulse_count'])
            
            # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–º–µ–Ω—É (—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π)
            active_shift = Shift.objects.select_for_update().filter(
                machine=machine, 
                operator=machine.current_operator, 
                status='active'
            ).first()
            
            if active_shift:
                # –ë–´–°–¢–†–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–∞ –∏–º–ø—É–ª—å—Å–æ–≤ (–±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø–æ–ª–µ–π)
                PulseLog.objects.create(
                    machine=machine,
                    shift=active_shift,
                    timestamp=timezone.now(),
                    pulse_count=pulse_count,
                    total_pulses=machine.current_pulse_count,
                    meters_produced=machine.current_meters
                )
                
                # –ê–¢–û–ú–ê–†–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω—ã
                active_shift.total_pulses = machine.current_pulse_count
                active_shift.total_meters = machine.current_meters
                active_shift.save(update_fields=['total_pulses', 'total_meters'])
        
        # –ü–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º –∏–∑ –ë–î –ü–û–°–õ–ï —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ current_meters
        machine.refresh_from_db()
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"‚ö° HIGH-SPEED: +{pulse_count} –∏–º–ø—É–ª—å—Å–æ–≤ | "
                   f"–í—Å–µ–≥–æ: {old_pulses}‚Üí{machine.current_pulse_count} | "
                   f"–ú–µ—Ç—Ä–∞–∂: {old_meters:.6f}‚Üí{machine.current_meters:.6f}–º")
        
        
        return JsonResponse({
            'success': True,
            'total_pulses': machine.current_pulse_count,
            'total_meters': float(machine.current_meters),
            'pulse_rate': f"{pulse_count} pulses/30s",
            'meters_per_pulse': float(machine.meters_per_pulse)
        })
        
    except Machine.DoesNotExist:
        logger.error(f"‚ùå –°—Ç–∞–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: ESP32_ID={esp32_id}")
        return JsonResponse({
            'success': False,
            'error': f'–°—Ç–∞–Ω–æ–∫ {esp32_id} –Ω–µ –Ω–∞–π–¥–µ–Ω'
        }, status=404)
    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –æ—à–∏–±–∫–∞ –≤ pulse_update_api: {str(e)}")
        return JsonResponse({
            'success': False,
            'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        }, status=500)

@csrf_exempt
@require_http_methods(["POST"])
def maintenance_call_api(request):
    """API –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–∞—Å—Ç–µ—Ä–∞"""
    try:
        data = json.loads(request.body)
        esp32_id = data.get('esp32_id')
        
        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞–Ω–æ–∫
        machine = get_object_or_404(Machine, esp32_id=esp32_id, is_active=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä
        if not machine.current_operator:
            return JsonResponse({
                'success': False,
                'error': '–ù–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ —Å—Ç–∞–Ω–∫–µ'
            }, status=400)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        active_call = MaintenanceCall.objects.filter(
            machine=machine, 
            status__in=['pending', 'in_progress']
        ).first()
        
        if active_call:
            return JsonResponse({
                'success': False,
                'error': '–£–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –º–∞—Å—Ç–µ—Ä–∞'
            }, status=400)
        
        # –°–æ–∑–¥–∞–µ–º –≤—ã–∑–æ–≤
        call = MaintenanceCall.objects.create(
            machine=machine,
            operator=machine.current_operator,
            call_time=timezone.now()
        )
        
        logger.info(f"Maintenance call created: {machine.name} by {machine.current_operator.get_full_name()}")
        
        return JsonResponse({
            'success': True,
            'message': '–ú–∞—Å—Ç–µ—Ä –≤—ã–∑–≤–∞–Ω',
            'call_id': call.id
        })
        
    except Exception as e:
        logger.error(f"Error in maintenance_call_api: {str(e)}")
        return JsonResponse({'error': str(e)}, status=500)

@csrf_exempt
@require_http_methods(["POST"])
def maintenance_start_api(request):
    """API –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–º–æ–Ω—Ç–∞"""
    try:
        data = json.loads(request.body)
        esp32_id = data.get('esp32_id')
        rfid_uid = data.get('rfid_uid')
        
        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞–Ω–æ–∫
        machine = get_object_or_404(Machine, esp32_id=esp32_id, is_active=True)
        
        # –ù–∞—Ö–æ–¥–∏–º –º–∞—Å—Ç–µ—Ä–∞
        master = get_object_or_404(Employee, rfid_uid__iexact=rfid_uid, is_active=True)
        
        # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤
        active_call = MaintenanceCall.objects.filter(
            machine=machine, 
            status='pending'
        ).first()
        
        if not active_call:
            return JsonResponse({
                'success': False,
                'error': '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –º–∞—Å—Ç–µ—Ä–∞'
            }, status=400)
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–º–æ–Ω—Ç
        active_call.start_maintenance(master)
        
        logger.info(f"Maintenance started: {master.get_full_name()} on {machine.name}")
        
        return JsonResponse({
            'success': True,
            'message': f'–†–µ–º–æ–Ω—Ç –Ω–∞—á–∞—Ç –º–∞—Å—Ç–µ—Ä–æ–º {master.get_full_name()}',
            'call_id': active_call.id
        })
        
    except Exception as e:
        logger.error(f"Error in maintenance_start_api: {str(e)}")
        return JsonResponse({'error': str(e)}, status=500)

@csrf_exempt
@require_http_methods(["POST"])
def maintenance_end_api(request):
    """API –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–º–æ–Ω—Ç–∞"""
    try:
        data = json.loads(request.body)
        esp32_id = data.get('esp32_id')
        rfid_uid = data.get('rfid_uid')
        description = data.get('description', '')
        
        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞–Ω–æ–∫
        machine = get_object_or_404(Machine, esp32_id=esp32_id, is_active=True)
        
        # –ù–∞—Ö–æ–¥–∏–º –º–∞—Å—Ç–µ—Ä–∞
        master = get_object_or_404(Employee, rfid_uid__iexact=rfid_uid, is_active=True)
        
        # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤
        active_call = MaintenanceCall.objects.filter(
            machine=machine, 
            status='in_progress',
            master=master
        ).first()
        
        if not active_call:
            return JsonResponse({
                'success': False,
                'error': '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞'
            }, status=400)
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–º–æ–Ω—Ç
        active_call.complete_maintenance(description)
        
        logger.info(f"Maintenance completed: {master.get_full_name()} on {machine.name}")
        
        return JsonResponse({
            'success': True,
            'message': f'–†–µ–º–æ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –º–∞—Å—Ç–µ—Ä–æ–º {master.get_full_name()}',
            'call_id': active_call.id,
            'repair_time': str(active_call.repair_time) if active_call.repair_time else None
        })
        
    except Exception as e:
        logger.error(f"Error in maintenance_end_api: {str(e)}")
        return JsonResponse({'error': str(e)}, status=500)

# ===== –í–ï–ë-–ò–ù–¢–ï–†–§–ï–ô–° –î–õ–Ø –ù–ê–ß–ê–õ–¨–ù–ò–ö–ê –¶–ï–•–ê =====

class DashboardView(TemplateView):
    """–î–∞—à–±–æ—Ä–¥ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    template_name = 'lohia_monitor/dashboard.html'
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏
        machines = Machine.objects.filter(is_active=True).order_by('id')
        
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–∞–Ω–∫–∞ –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –º–∞—Å—Ç–µ—Ä–∞
        machines_data = []
        for machine in machines:
            active_call = MaintenanceCall.objects.filter(
                machine=machine, 
                status__in=['pending', 'in_progress']
            ).select_related('master').first()
            
            machines_data.append({
                'machine': machine,
                'active_call': active_call,
            })
        
        context['machines_data'] = machines_data
        
        return context

class ShiftsHistoryView(TemplateView):
    """–ò—Å—Ç–æ—Ä–∏—è —Å–º–µ–Ω"""
    template_name = 'lohia_monitor/shifts_history.html'
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        
        shifts = Shift.objects.all().select_related('operator', 'machine')
        context['shifts'] = shifts
        
        return context

class MaintenanceHistoryView(TemplateView):
    """–ò—Å—Ç–æ—Ä–∏—è –≤—ã–∑–æ–≤–æ–≤ –º–∞—Å—Ç–µ—Ä–∞"""
    template_name = 'lohia_monitor/maintenance_history.html'
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        
        calls = MaintenanceCall.objects.all().select_related('operator', 'master', 'machine')
        context['calls'] = calls
        
        return context

class MachineStatsView(TemplateView):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞–Ω–∫–∞"""
    template_name = 'lohia_monitor/machine_stats.html'
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        
        machine = Machine.objects.filter(is_active=True).first()
        
        if machine:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_shifts = Shift.objects.filter(machine=machine).count()
            total_meters = Shift.objects.filter(machine=machine).aggregate(
                total=models.Sum('total_meters')
            )['total'] or 0
            
            total_calls = MaintenanceCall.objects.filter(machine=machine).count()
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏ –≤—Ä—É—á–Ω—É—é
            completed_calls = MaintenanceCall.objects.filter(
                machine=machine, 
                start_time__isnull=False
            )
            
            if completed_calls.exists():
                total_response_seconds = 0
                count = 0
                for call in completed_calls:
                    if call.response_time:
                        total_response_seconds += call.response_time.total_seconds()
                        count += 1
                
                avg_response_time = total_response_seconds / count / 60 if count > 0 else 0  # –≤ –º–∏–Ω—É—Ç–∞—Ö
            else:
                avg_response_time = 0
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞ —Å–º–µ–Ω—É
            avg_meters_per_shift = float(total_meters) / total_shifts if total_shifts > 0 else 0
            
            # –í—ã—á–∏—Å–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–≤—ã–∑–æ–≤—ã –Ω–∞ —Å–º–µ–Ω—É)
            calls_per_shift = total_calls / total_shifts if total_shifts > 0 else 0
            
            context.update({
                'machine': machine,
                'total_shifts': total_shifts,
                'total_meters': total_meters,
                'total_calls': total_calls,
                'avg_response_time': avg_response_time,
                'avg_meters_per_shift': avg_meters_per_shift,
                'calls_per_shift': calls_per_shift,
            })
        
        return context


class MachineDetailView(TemplateView):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞–Ω–∫–∞"""
    template_name = 'lohia_monitor/machine_detail.html'
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        
        machine_id = kwargs.get('machine_id')
        machine = get_object_or_404(Machine, id=machine_id)
        
        # –ê–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞
        active_shift = Shift.objects.filter(
            machine=machine, 
            status='active'
        ).select_related('operator').first()
        
        # –ê–∫—Ç–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –º–∞—Å—Ç–µ—Ä–∞
        active_call = MaintenanceCall.objects.filter(
            machine=machine, 
            status__in=['pending', 'in_progress']
        ).select_related('operator', 'master').first()
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–º–ø—É–ª—å—Å—ã (–¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞)
        recent_pulses = PulseLog.objects.filter(
            machine=machine
        ).order_by('-timestamp')[:20]
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–º–µ–Ω
        recent_shifts = Shift.objects.filter(
            machine=machine
        ).select_related('operator').order_by('-start_time')[:5]
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –≤—ã–∑–æ–≤–æ–≤ –º–∞—Å—Ç–µ—Ä–∞
        recent_calls = MaintenanceCall.objects.filter(
            machine=machine
        ).select_related('operator', 'master').order_by('-call_time')[:5]
        
        context.update({
            'machine': machine,
            'active_shift': active_shift,
            'active_call': active_call,
            'recent_pulses': recent_pulses,
            'recent_shifts': recent_shifts,
            'recent_calls': recent_calls,
        })
        
        return context


# ===== –°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–∞—Å—Ç–µ—Ä–∞ =====
def master_page(request):
    return render(request, 'lohia_monitor/master.html')

# ===== API –î–õ–Ø AJAX –û–ë–ù–û–í–õ–ï–ù–ò–Ø =====

@require_http_methods(["GET"])
def dashboard_status_api(request):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –¥–∞—à–±–æ—Ä–¥–∞ (AJAX polling)"""
    try:
        machine = Machine.objects.filter(is_active=True).first()
        
        if not machine:
            return JsonResponse({'success': False, 'error': 'No machine found'}, status=404)
        
        # –ê–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞
        active_shift = Shift.objects.filter(
            machine=machine, 
            status='active'
        ).select_related('operator').first()
        
        # –ê–∫—Ç–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –º–∞—Å—Ç–µ—Ä–∞
        active_call = MaintenanceCall.objects.filter(
            machine=machine, 
            status__in=['pending', 'in_progress']
        ).select_related('operator', 'master').first()
        
        response_data = {
            'success': True,
            'machine': {
                'name': machine.name,
                'status': machine.status,
                'current_operator': machine.current_operator.get_full_name() if machine.current_operator else None,
                'current_pulse_count': machine.current_pulse_count,
                'current_meters': float(machine.current_meters),
            },
            'active_shift': None,
            'active_call': None,
        }
        
        if active_shift:
            response_data['active_shift'] = {
                'operator': active_shift.operator.get_full_name(),
                'start_time': timezone.localtime(active_shift.start_time).strftime('%H:%M'),
                'duration_hours': active_shift.duration_hours,
                'total_pulses': active_shift.total_pulses,
                'total_meters': float(active_shift.total_meters),
            }
        
        if active_call:
            response_data['active_call'] = {
                'status': active_call.status,
                'status_display': active_call.get_status_display(),
                'operator': active_call.operator.get_full_name(),
                'master': active_call.master.get_full_name() if active_call.master else None,
                'call_time': timezone.localtime(active_call.call_time).strftime('%H:%M'),
                'response_time': str(active_call.response_time) if active_call.response_time else None,
            }
        
        return JsonResponse(response_data)
        
    except Exception as e:
        logger.error(f"Error in dashboard_status_api: {str(e)}")
        return JsonResponse({'success': False, 'error': str(e)}, status=500)

@require_http_methods(["GET"])
def maintenance_history_api(request):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–∑–æ–≤–æ–≤ –º–∞—Å—Ç–µ—Ä–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –≤—ã–∑–æ–≤–æ–≤ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
        calls = MaintenanceCall.objects.select_related(
            'operator', 'master', 'machine'
        ).order_by('-call_time')[:50]
        
        calls_data = []
        for call in calls:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏
            response_time_display = '‚Äî'
            if call.response_time:
                total_seconds = int(call.response_time.total_seconds())
                minutes = total_seconds // 60
                seconds = total_seconds % 60
                if minutes > 0:
                    response_time_display = f"{minutes} –º–∏–Ω {seconds} —Å–µ–∫"
                else:
                    response_time_display = f"{seconds} —Å–µ–∫"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Ä–µ–º–æ–Ω—Ç–∞
            repair_time_display = '‚Äî'
            if call.repair_time:
                total_seconds = int(call.repair_time.total_seconds())
                minutes = total_seconds // 60
                seconds = total_seconds % 60
                if minutes > 0:
                    repair_time_display = f"{minutes} –º–∏–Ω {seconds} —Å–µ–∫"
                else:
                    repair_time_display = f"{seconds} —Å–µ–∫"
            
            calls_data.append({
                'id': call.id,
                'date': timezone.localtime(call.call_time).strftime('%d.%m.%Y'),
                'call_time': timezone.localtime(call.call_time).strftime('%H:%M'),
                'machine': call.machine.name if call.machine else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                'operator': call.operator.get_full_name() if call.operator else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                'master': call.master.get_full_name() if call.master else None,
                'status': call.status,
                'status_display': call.get_status_display(),
                'response_time': response_time_display,
                'repair_time': repair_time_display,
                'description': call.description if call.description else None,
            })
        
        return JsonResponse({
            'success': True,
            'calls': calls_data,
            'count': len(calls_data)
        })
        
    except Exception as e:
        logger.error(f"Error in maintenance_history_api: {str(e)}")
        return JsonResponse({'success': False, 'error': str(e)}, status=500)

@require_http_methods(["GET"])
def shifts_history_api(request):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —Å–º–µ–Ω"""
    try:
        shifts = Shift.objects.select_related('operator', 'machine').order_by('-start_time')[:20]
        
        shifts_data = []
        for shift in shifts:
            shifts_data.append({
                'id': shift.id,
                'start_time': timezone.localtime(shift.start_time).strftime('%d.%m.%Y %H:%M:%S'),
                'end_time': timezone.localtime(shift.end_time).strftime('%d.%m.%Y %H:%M:%S') if shift.end_time else '–ê–∫—Ç–∏–≤–Ω–∞',
                'operator': shift.operator.get_full_name(),
                'duration': shift.get_duration_display(),
                'total_pulses': shift.total_pulses,
                'total_meters': float(shift.total_meters),
                'status': shift.get_status_display(),
            })
        
        return JsonResponse({'success': True, 'shifts': shifts_data})
        
    except Exception as e:
        logger.error(f"Error in shifts_history_api: {str(e)}")
        return JsonResponse({'success': False, 'error': str(e)}, status=500)

@require_http_methods(["GET"])
def machine_detail_api(request, machine_id):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–∞—à–∏–Ω—ã"""
    try:
        machine = get_object_or_404(Machine, id=machine_id)
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–º–µ–Ω
        recent_shifts = Shift.objects.filter(
            machine=machine
        ).select_related('operator').order_by('-start_time')[:5]
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –≤—ã–∑–æ–≤–æ–≤
        recent_calls = MaintenanceCall.objects.filter(
            machine=machine
        ).select_related('operator', 'master').order_by('-call_time')[:5]
        
        shifts_data = []
        for shift in recent_shifts:
            shifts_data.append({
                'operator': shift.operator.get_full_name(),
                'start_time': timezone.localtime(shift.start_time).strftime('%d.%m %H:%M'),
                'end_time': timezone.localtime(shift.end_time).strftime('%d.%m %H:%M') if shift.end_time else None,
                'duration': shift.get_duration_display(),
                'total_meters': float(shift.total_meters),
                'status': shift.status,
            })
        
        calls_data = []
        for call in recent_calls:
            calls_data.append({
                'call_time': timezone.localtime(call.call_time).strftime('%d.%m %H:%M'),
                'operator': call.operator.get_full_name(),
                'master': call.master.get_full_name() if call.master else None,
                'response_time': call.get_response_time_display(),
                'repair_time': call.get_repair_time_display(),
                'status': call.status,
            })
        
        return JsonResponse({
            'success': True,
            'shifts': shifts_data,
            'calls': calls_data,
        })
        
    except Exception as e:
        logger.error(f"Error in machine_detail_api: {str(e)}")
        return JsonResponse({'success': False, 'error': str(e)}, status=500)

@require_http_methods(["GET"])
def dashboard_status_all_api(request):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Å—Ç–∞–Ω–∫–æ–≤ (–¥–ª—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ dashboard)"""
    try:
        machines = Machine.objects.filter(is_active=True).order_by('id')
        
        machines_data = []
        for machine in machines:
            # –ê–∫—Ç–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –º–∞—Å—Ç–µ—Ä–∞
            active_call = MaintenanceCall.objects.filter(
                machine=machine, 
                status__in=['pending', 'in_progress']
            ).select_related('master').first()
            
            machine_data = {
                'machine_id': machine.id,
                'name': machine.name,
                'status': machine.status,
                'current_operator': machine.current_operator.get_full_name() if machine.current_operator else None,
                'current_meters': float(machine.current_meters),
                'current_pulse_count': machine.current_pulse_count,
                'call_status': active_call.status if active_call else None,
                'master': active_call.master.get_full_name() if active_call and active_call.master else None,
            }
            
            machines_data.append(machine_data)
        
        logger.debug(f"Dashboard API: returning {len(machines_data)} machines")
        
        return JsonResponse({
            'success': True,
            'machines': machines_data
        })
        
    except Exception as e:
        logger.error(f"Error in dashboard_status_all_api: {str(e)}")
        return JsonResponse({'success': False, 'error': str(e)}, status=500)

@require_http_methods(["GET"])
def machine_stats_api(request):
    """API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ç–∞–Ω–∫–∞ (AJAX)"""
    try:
        machine = Machine.objects.filter(is_active=True).first()
        
        if not machine:
            return JsonResponse({'success': False, 'error': '–°—Ç–∞–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω'}, status=404)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_shifts = Shift.objects.filter(machine=machine).count()
        total_meters = Shift.objects.filter(machine=machine).aggregate(
            total=models.Sum('total_meters')
        )['total'] or 0
        
        total_calls = MaintenanceCall.objects.filter(machine=machine).count()
        
        # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏
        completed_calls = MaintenanceCall.objects.filter(
            machine=machine, 
            start_time__isnull=False
        )
        
        avg_response_time = 0
        if completed_calls.exists():
            total_response_seconds = 0
            count = 0
            for call in completed_calls:
                if call.response_time:
                    total_response_seconds += call.response_time.total_seconds()
                    count += 1
            
            avg_response_time = total_response_seconds / count / 60 if count > 0 else 0
        
        # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        avg_meters_per_shift = float(total_meters) / total_shifts if total_shifts > 0 else 0
        calls_per_shift = total_calls / total_shifts if total_shifts > 0 else 0
        
        return JsonResponse({
            'success': True,
            'total_shifts': total_shifts,
            'total_meters': float(total_meters),
            'total_calls': total_calls,
            'avg_response_time': round(avg_response_time, 1),
            'avg_meters_per_shift': round(avg_meters_per_shift, 0),
            'calls_per_shift': round(calls_per_shift, 2),
            'current_operator': machine.current_operator.get_full_name() if machine.current_operator else None,
            'current_pulse_count': machine.current_pulse_count,
            'current_meters': float(machine.current_meters),
            'status': machine.status,
        })
        
    except Exception as e:
        logger.error(f"Error in machine_stats_api: {str(e)}")
        return JsonResponse({'success': False, 'error': str(e)}, status=500)


# ===== AJAX POLLING API ENDPOINTS =====

@login_required
def machines_polling_api(request):
    """
    API –¥–ª—è AJAX polling - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Å—Ç–∞–Ω–∫–æ–≤.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞ Lohia.
    """
    try:
        machines = Machine.objects.filter(is_active=True).select_related('current_operator')
        
        data = []
        for machine in machines:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–º–µ–Ω—É –µ—Å–ª–∏ –µ—Å—Ç—å
            active_shift = None
            if machine.current_operator:
                active_shift = Shift.objects.filter(
                    machine=machine,
                    operator=machine.current_operator,
                    status='active'
                ).first()
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –º–∞—Å—Ç–µ—Ä–∞
            active_call = MaintenanceCall.objects.filter(
                machine=machine,
                status='pending'
            ).first()
            
            data.append({
                'id': machine.id,
                'name': machine.name,
                'esp32_id': machine.esp32_id,
                'status': machine.status,
                'status_display': machine.get_status_display(),
                'current_meters': float(machine.current_meters),
                'current_pulse_count': machine.current_pulse_count,
                'meters_per_pulse': float(machine.meters_per_pulse),
                'current_operator': {
                    'id': machine.current_operator.id,
                    'name': machine.current_operator.get_full_name(),
                } if machine.current_operator else None,
                'shift': {
                    'id': active_shift.id,
                    'start_time': active_shift.start_time.isoformat(),
                    'total_pulses': active_shift.total_pulses,
                    'total_meters': float(active_shift.total_meters),
                } if active_shift else None,
                'maintenance_call': {
                    'id': active_call.id,
                    'call_time': active_call.call_time.isoformat(),
                    'status': active_call.status,
                } if active_call else None,
            })
        
        return JsonResponse({
            'success': True,
            'data': data,
            'count': len(data),
            'timestamp': timezone.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"Error in machines_polling_api: {e}")
        return JsonResponse({
            'success': False,
            'error': str(e)
        }, status=500)