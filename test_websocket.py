#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è ERP —Å–∏—Å—Ç–µ–º—ã.
"""

import asyncio
import websockets
import json
import sys

async def test_websocket(url, name):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."""
    try:
        print(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {name}: {url}")
        
        async with websockets.connect(url) as websocket:
            print(f"‚úÖ {name} –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            test_message = {
                "type": "get_machine_status" if "lohia" in url else "get_employee_data"
            }
            
            await websocket.send(json.dumps(test_message))
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {test_message}")
            
            # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç
            try:
                response = await asyncio.wait_for(websocket.recv(), timeout=5.0)
                data = json.loads(response)
                print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ: {data}")
                print(f"‚úÖ {name} —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n")
                return True
            except asyncio.TimeoutError:
                print(f"‚è∞ {name} - —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞\n")
                return False
                
    except Exception as e:
        print(f"‚ùå {name} –æ—à–∏–±–∫–∞: {e}\n")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π ERP —Å–∏—Å—Ç–µ–º—ã\n")
    
    base_url = "ws://localhost:8000"
    
    # –°–ø–∏—Å–æ–∫ WebSocket endpoints –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    endpoints = [
        (f"{base_url}/ws/lohia/machine1/", "Lohia Machine Monitor"),
        (f"{base_url}/ws/employees/", "Employee Monitor"),
        (f"{base_url}/ws/notifications/", "Notifications"),
        (f"{base_url}/ws/security/", "Security Monitor"),
    ]
    
    results = []
    
    for url, name in endpoints:
        result = await test_websocket(url, name)
        results.append((name, result))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    print("=" * 50)
    
    success_count = 0
    for name, result in results:
        status = "‚úÖ –†–ê–ë–û–¢–ê–ï–¢" if result else "‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢"
        print(f"{name}: {status}")
        if result:
            success_count += 1
    
    print("=" * 50)
    print(f"–£—Å–ø–µ—à–Ω–æ: {success_count}/{len(results)}")
    
    if success_count == len(results):
        print("üéâ –í—Å–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç!")
        return 0
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç")
        return 1

if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\nüõë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
